---
import { getCollection, render } from "astro:content";
import Layout from "../../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import Tag from "../../components/Tag.astro";
import TableOfContents from "../../components/TableOfContents.astro";
import Callout from "../../components/Callout.astro";
import YouTube from "../../components/YouTube.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  return posts.map((post) => {
    return {
      params: {
        id: post.id,
      },
      props: {
        post,
      },
    };
  });
}

export type Props = Awaited<ReturnType<typeof getStaticPaths>>[number]["props"];

const { post } = Astro.props;
const { Content, headings } = await render(post);
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image=`/og/${post.id}.png`
>
  <main class="container">
    <article>
      {
        post.data.cover && (
          <Image
            src={post.data.cover}
            alt=""
            widths={[400, 600, 1000, 1600]}
            sizes="100vw, (min-width: 768px) 1000px"
            class="rounded-2xl aspect-[16/9] w-full max-w-[1008px] mx-auto object-cover mb-8 lg:mb-14 border-8 border-border"
          />
        )
      }
      <div
        class="flex flex-col lg:flex-row gap-12 items-center justify-center lg:items-start"
      >
        <div class="max-w-[700px] w-full order-2 lg:order-1">
          <h1 class="blog-heading mb-8">
            {post.data.title}
          </h1>
          <div class="flex items-center gap-2 my-8">
            <span class="text-sm">Posted in</span>
            {post.data.tags.map((tag) => <Tag tag={tag} />)}
            <span class="text-sm">on</span>
            <span class="text-sm font-bold">
              {
                new Date(post.data.date).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                })
              }
            </span>
          </div>
          <div class="post-content">
            <Content components={{ Callout, YouTube }} />
          </div>
        </div>
        <TableOfContents headings={headings} />
      </div>
    </article>
  </main>
</Layout>

<script is:inline>
  // const videoInit = () => {
  //   const youtubeContainers = document.querySelectorAll(".youtube-video");

  //   youtubeContainers.forEach((container) => {
  //     const button = container.querySelector("button");
  //     const videoDiv = container.querySelector(".video-content");

  //     button.addEventListener("click", function () {
  //       const videoId = container.getAttribute("data-video-id");

  //       if (!videoId) return;

  //       const iframe = document.createElement("iframe");
  //       iframe.setAttribute(
  //         "src",
  //         `https://www.youtube.com/embed/${videoId}?autoplay=1`
  //       );
  //       iframe.setAttribute("frameborder", "0");
  //       iframe.setAttribute(
  //         "allow",
  //         "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  //       );
  //       iframe.setAttribute("allowfullscreen", "true");
  //       iframe.setAttribute(
  //         "class",
  //         "border-8 border-border aspect-[16/9] w-full relative overflow-hidden rounded-xl"
  //       );
  //       iframe.style.width = "100%";
  //       iframe.style.height = "100%";

  //       // Clear the container and append the iframe
  //       button.innerHTML = "";
  //       videoDiv.appendChild(iframe);
  //     });
  //   });
  // };

  const tocIntersectionObserver = () => {
    const observer = new IntersectionObserver((sections) => {
      sections.forEach((section) => {
        const heading = section.target.querySelector("h2, h3, h4, h5");
        if (!heading) return;
        const id = heading.getAttribute("id");
        if (!id) return;

        // Get the link to this section's heading
        const link = document.querySelector(`#toc li a[href="#${id}"]`);
        if (!link) return;

        // Add/remove the .active class based on whether the section is visible
        const addRemove = section.intersectionRatio > 0 ? "remove" : "add";
        link.classList[addRemove]("opacity-50");
      });
    });

    document.querySelectorAll(".post-content section").forEach((section) => {
      observer.observe(section);
    });
  };

  const initializeScripts = () => {
    // videoInit();
    tocIntersectionObserver();
  };

  initializeScripts();

  document.addEventListener("astro:after-swap", initializeScripts);
</script>
