---
import { getCollection, render } from "astro:content";
import Layout from "../../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import { fileToUrl } from "notion-astro-loader";
import Tag from "../../components/Tag.astro";
import TableOfContents from "../../components/TableOfContents.astro";

export async function getStaticPaths() {
  const pages = await getCollection("blog");

  return pages.map((page) => {
    return {
      params: {
        slug: page.data.properties.slug,
      },
      props: {
        page,
      },
    };
  });
}

export type Props = Awaited<ReturnType<typeof getStaticPaths>>[number]["props"];
const { page } = Astro.props;
const { Content, headings } = await render(page);
---

<Layout>
  <main class="container">
    <article>
      {
        page.data.cover && (
          <Image
            inferSize
            src={fileToUrl(page.data.cover)}
            alt=""
            widths={[200, 400, 600, 1000, 1400]}
            sizes="100vw"
            class="rounded-2xl aspect-[16/9] w-full max-w-[1008px] mx-auto object-cover mb-8 lg:mb-14 border-8 border-border"
          />
        )
      }
      <div
        class="flex flex-col lg:flex-row gap-12 items-center justify-center lg:items-start"
      >
        <div class="max-w-[700px] w-full order-2 lg:order-1">
          <h1 class="blog-heading mb-8">
            {page.data.properties.Name}
          </h1>
          <div class="flex items-center gap-2 my-8">
            <span class="text-sm">Posted in</span>
            {page.data.properties.tags.map((tag) => <Tag tag={tag} />)}
            <span class="text-sm">on</span>
            <span class="text-sm font-bold">
              {
                new Date(
                  page.data.properties.created?.created_time!
                ).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                })
              }
            </span>
          </div>
          <div class="post-content">
            <Content />
          </div>
        </div>
        <TableOfContents headings={headings} />
      </div>
    </article>
  </main>
</Layout>

<script is:inline>
  const videoInit = () => {
    const youtubeContainers = document.querySelectorAll(".notion-video");

    youtubeContainers.forEach((container) => {
      container.addEventListener("click", function () {
        const videoId = container
          .querySelector("button")
          .getAttribute("data-video-id");
        if (!videoId) return;

        const iframe = document.createElement("iframe");
        iframe.setAttribute(
          "src",
          `https://www.youtube.com/embed/${videoId}?autoplay=1`
        );
        iframe.setAttribute("frameborder", "0");
        iframe.setAttribute(
          "allow",
          "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        );
        iframe.setAttribute("allowfullscreen", "true");
        iframe.setAttribute(
          "class",
          "border-8 border-border aspect-[16/9] w-full relative overflow-hidden rounded-xl"
        );
        iframe.style.width = "100%";
        iframe.style.height = "100%";

        // Clear the container and append the iframe
        container.innerHTML = "";
        container.appendChild(iframe);
      });
    });
  };

  const tocIntersectionObserver = () => {
    const observer = new IntersectionObserver((sections) => {
      sections.forEach((section) => {
        const heading = section.target.querySelector("h2, h3, h4, h5");
        if (!heading) return;
        const id = heading.getAttribute("id");
        if (!id) return;

        // Get the link to this section's heading
        const link = document.querySelector(`#toc li a[href="#${id}"]`);
        if (!link) return;

        // Add/remove the .active class based on whether the section is visible
        const addRemove = section.intersectionRatio > 0 ? "remove" : "add";
        link.classList[addRemove]("opacity-50");
      });
    });

    document.querySelectorAll(".post-content section").forEach((section) => {
      observer.observe(section);
    });
  };

  const initializeScripts = () => {
    videoInit();
    tocIntersectionObserver();
  };

  initializeScripts();

  document.addEventListener("astro:after-swap", initializeScripts);
</script>
